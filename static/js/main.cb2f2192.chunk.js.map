{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","AppName","id","onClick","colorChange","toggleMode","htmlFor","ModeLabel","TextForm","useState","text","setText","charOccurence","setcharOccurence","heading","backgroundColor","color","value","onChange","event","target","rows","placeholder","disabled","length","newText","showAlert","Occur","prompt","myArr","split","count","i","trim","filter","element","defaultProps","AboutPage","App","setMode","modeLabel","setModeLabel","setAlert","message","setTimeout","colour","document","getElementById","body","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cb2f2192.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div style={{height:'50px'}}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.AppName}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.AboutPage}\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            <div onClick={props.colorChange} className=\"colorPallets mx-3\">\r\n              <input type=\"color\" id=\"colorpicker\" />\r\n            </div>\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className={`form-check-label text-${\r\n                  props.mode === \"light\" ? \"dark\" : \"light\"\r\n                }`}\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                {props.ModeLabel}\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  AppName: PropTypes.string.isRequired,\r\n  AboutPage: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  AppName: \"set app name here\",\r\n  AboutPage: \"set about text here\",\r\n};","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  // useState hooks\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const [charOccurence, setcharOccurence] = useState(0);\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    setcharOccurence(0);\r\n    props.showAlert(\"Converted to uppercase !\",\"success\")\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    setcharOccurence(0);\r\n    props.showAlert(\"Converted to lowercase !\",\"success\")\r\n  };\r\n\r\n  const handleClearText = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    setcharOccurence(0);\r\n    props.showAlert(\"Text Cleared !\",\"success\")\r\n  };\r\n\r\n  const handleCharOccur = () => {\r\n    let Occur = prompt(\"Enter the alphabet to find Occurences\");\r\n    const myArr = text.split(\"\");\r\n    let count = 0;\r\n    let i = 0;\r\n    for (i = 0; i < myArr.length; i++) {\r\n      //console.log(myArr[i]);\r\n      if (myArr[i] === `${Occur}`) {\r\n        count = count + 1;\r\n      }\r\n    }\r\n    setcharOccurence(count);\r\n    // console.log(count);\r\n  };\r\n    \r\n    const handleOnChange = (event) => {\r\n      setText(event.target.value);\r\n      setcharOccurence(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container my-4\">\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"UserText\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#212529\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            rows=\"9\"\r\n            placeholder=\"Enter Text Here\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <button disabled={text.length===0}\r\n          className=\"btn btn-outline-danger mx-3 my-3\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n\r\n        <button disabled={text.length===0}\r\n          className=\"btn btn-outline-danger mx-3 my-3\"\r\n          onClick={handleLowClick}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n\r\n        <button disabled={text.length===0}\r\n          className=\"btn btn-outline-danger mx-3 my-3\"\r\n          onClick={handleClearText}\r\n        >\r\n          Clear Text\r\n        </button>\r\n\r\n        <button disabled={text.length===0}\r\n          className=\"btn btn-outline-danger mx-3 my-3\"\r\n          onClick={handleCharOccur}\r\n        >\r\n          Character Occurences\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h2>All About Text</h2>\r\n        <p>\r\n          <b> {text.trim().split(\"/\\s+/\").filter((element)=>{return element.length!==0}).length} </b>\r\n          Words AND\r\n          <b> {text.trim().length} </b>\r\n          Characters\r\n        </p>\r\n        <p>\r\n          Character you searched for Comes <b> {charOccurence}</b> Times\r\n        </p>\r\n        <p>\r\n          It will take about\r\n          <b> {0.08 * text.trim().split(\"/\\s+/\").filter((element)=>{return element.length!==0}).length} </b>\r\n          Minutes to read.\r\n        </p>\r\n        <h3 className=\"my-3\">Preview</h3>\r\n        <p>\r\n          {text.length > 0 ? text : \"Enter Some Text Above To Preview It Here\"}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// let str = \"How are you doing today?\";\r\n// const myArr = str.split(\"\");\r\n// let count=0;\r\n// let i = 0;\r\n// for(i=0;i<myArr.length;i++){\r\n// \t//console.log(myArr[i]);\r\n//     if(myArr[i]==='a'){\r\n// \t\tcount=count+1;\r\n//         //return count;\r\n//         }\r\n// console.log(count);\r\n// }","// import logo from \"./logo.svg\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./Components/Alert\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\n// import About from \"./Components/About\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [modeLabel, setModeLabel] = useState(\"Enable Dark Mode\");\n  const [alert, setAlert] = useState(null);\n\n  const colorChange = () => {\n    let colour = document.getElementById(\"colorpicker\").value;\n    document.body.style.backgroundColor = colour;\n  };\n\n  const showAlert = (message, type) => {\n    setAlert({ msg: message, type: type });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setModeLabel(\"Enable Light Mode\");\n      document.body.style.backgroundColor = \"#212529\";\n      document.body.style.color = \"#fff\";\n      showAlert(\"Dark mode has been enabled.\", \"success\");\n      // this is for dynamically changing the title of the website.\n      document.title = \"TextLab | Dark Mode\";\n    } else {\n      setMode(\"light\");\n      setModeLabel(\"Enable Dark Mode\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      showAlert(\"Light mode has been enabled.\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          AppName=\"TextLab\"\n          AboutPage=\"About Us\"\n          mode={mode}\n          colorChange={colorChange}\n          toggleMode={toggleMode}\n          ModeLabel={modeLabel}\n        />\n        {/* here we are passing the useState alert to alert.js as a prop */}\n        <Alert alert={alert} />\n        {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About mode={mode} /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm\n              showAlert={showAlert}\n              heading=\"Enter The Text Below\"\n              mode={mode}\n            />\n          {/* </Route> */}\n        {/* </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}